/*display: inline

Colocando display: inline nos elementos permite eles se posicionarem um do lado do outro, o problema do display: inline é que os elementos não aceitam mais que seja modificada tanto a width quanto a height. Isso limita MUITO nossas possibilidades.

display: inline-block

O display: inline-block permite os elementos se posicionarem um do lado do outro porém, diferentemente do display: inline ele permite que os elementos tenham sua width e height modificadas. Por esse motivo o display: inline-block é muito mais interessante na maioria dos casos do que o display: inline.

O problema de usar display: inline-block é espaçar os elementos entre si. Para fazer isso teríamos que colocar margins e fazer contas.

float: left | right

O float é mais complicado, ele empurra o elemento para um dos lados (left | right) e os elementos que estão embaixo sobem. Isso nem sempre é o que a gente quer. Além do mais o float não permite que usemos a propriedade vertical-align: middle para alinhar os elementos verticalmente. Ou seja, para contornar isso uma possibilidade seria ter que colocar margin-top ou bottom nos elementos e usar os temidos números mágicos!

display: flex

O display: flex veio com o intuito de facilitar nossa vida nesses aspectos de posicionamento. Ele permite os elementos ficarem um do lado do outro, permite espaçar os elementos de forma mais intuitiva e sem ter que fazer cálculos. Além disso ele também permite alinhar os elementos verticalmente de forma fácil.

O display flex pode ser um pouco mais complicado de usar tendo em vista que existem diversas propriedades que vem junto da especificação flexible box, todavia tudo isso foi feito para justamente melhorar nosso código.*/

.cabecalhoPrincipal .container{
    display: flex;
    align-items: center;
    justify-content: space-between; /*distribui um espço restante entre os elementos, um espaço vazio*/
}

.cabecalhoPrincipal-nav{
    display: flex;
}

.rodapePrincipal-patrocinadores .container{
    display: flex;
    justify-content: space-between;
}

.rodapePrincipal-patrocinadores-list{
    display: flex;
    justify-content: space-around; /*distribui espço AO REDOR dos eleme*/
    align-items: center;
    width: 70%;
    margin-right: 5%;
}

.rodapePrincipal-contatoForm{
    width: 25%;
}

.rodapePrincipal-contatoForm-fieldset{
    display: flex;
}

.rodapePrincipal-navMap-list{
    display: flex;
    flex-direction: column; /*organizamos o flex em colunas e não em 'row' em linhas horizontais como é po seu padrão*/
    flex-wrap: wrap; /*ele quebra para a próxima coluna quando alcança a altura máxima*/
    height: 255px;
}

/*Posicionamento dos elementos:
Colocar todo espaço à esquerda, jogando o conteúdo para direita com justify-content: flex-end.

Colocar todo espaço à direita, jogando o conteúdo para esquerda com justify-content: flex-start (que é o padrão).

Colocar todo espaço à esquerda e à direita, jogando o conteúdo para o meio com justify-content: center.

Colocar todo espaço entre os elementos como vimos antes usando justify-content: space-between.

E uma possibilidade bem interessante também é colocar o espaço em volta dos elementos. Podemos usar o justify-content: space-around para isso.

Para falar para um elemento / flex item crescer e ocupar todo o espaço que está sobrando dentro do flex container devemos usar a propriedade flex-grow.

.flex-item {
  flex-grow: 1;
}

A propriedade flex-grow vista no exercício anterior ajuda muito caso queiramos que um elemento ocupe toda a largura restante do flex container.

Por exemplo, se temos:

Elemento 1: 200 px.

Elemento 2: 200 px.

Espaço vazio que sobrou do flex container: 600 px.

Total: 1000 px.

Se colocamos flex-grow: 1 no primeiro elemento, ele passa a ter 800 px de largura, ou seja:

Espaço vazio + Elemento 1: 800 px.

E o segundo elemento continua tendo 200 px de largura.

Simplesmente colocamos flex-shrink: 0 no nosso elemento que não queremos que diminua, no caso o código ficaria assim:
.videoSobre-video {
  flex-shrink: 0;
}*/

.conteudoPrincipal-cursos{
    display: flex;
    flex-wrap: wrap;
    
}

.conteudoPrincipal-cursos-link{
    width: 23%;
    margin-bottom: 1%;
}

.conteudoPrincipal-cursos-link:nth-child(4n) {
    margin-right: 0;
    /*o nth-child(4n) está pegando os elementos mul. de 4*/
}

.conteudoPrincipal-cursos-link:nth-child(4n) {
    margin-left: 0;

}

/*
container:

display: flex
flex-direction
justify-content
flex-wrap
flex-flow
align-items
align-content

flex item:

order
flex-grow
flex-shrink
flex-basis
flex
align-self*/

/*parte mobile*/
@media screen and (max-width: 768px) {
    .cabecalhoPrincipal-nav{
        flex-direction: column;
    }
    
    .cabecalhoPrincipal .container{
        flex-direction: column;
        align-items: initial; /*coloca o valor inicial*/
        text-align: center;
    }
    
    .conteudoPrincipal-cursos{
        flex-direction: column;
    }
    
    .conteudoPrincipal-cursos-link{
        width: 100%;
    }
    
    .rodapePrincipal-navMap-list{
        height: auto;
    }
    
    .rodapePrincipal-patrocinadores .container{
        flex-direction: column;
        align-items: center;
    }
    
    .rodapePrincipal-patrocinadores-list{
        margin: 0;
        width: 100%;
    }
    
    .rodapePrincipal-contatoForm{
        width: 100%;
    }
    
    .rodapePrincipal-contatoForm-fieldset{
        justify-content: center;
    }

    .cabecalhoPrincipal-nav-link-app{
        order: -1; /*colocamos o elemento na primeira ordem da lista*/
    }
}

